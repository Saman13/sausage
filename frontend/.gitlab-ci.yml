cache:
  paths:
    - frontend/dist/frontend

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}

stages:
   - build
   - test
   - notify
   - release
   - deploy

build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug #kaniko служит для билда образа
    entrypoint: [ "" ]
  # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/frontend"
      --dockerfile "${CI_PROJECT_DIR}/frontend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/sausage-frontend:$CI_COMMIT_SHA"
      --build-arg VERSION=$VERSION
      --cache=true

# Запуск проверки сонаром
sonarqube-frontend-sast:
  stage: test
  script:
    - unset SPRING_DATASOURCE_URL
    - unset SPRING_DATASOURCE_USERNAME
    - unset SPRING_DATASOURCE_PASSWORD
    - cd frontend
    - npm install -g sonarqube-scanner
    - >
      sonar-scanner -Dsonar.projectKey=${SONAR_PROJECT_KEY_FRONT}
      -Dsonar.sources=.
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONAR_LOGIN}
  cache:
    key: ${CI_JOB_NAME}
    paths: [ ]

  needs:
    - build
  only:
    variables:
      - $CI_COMMIT_MESSAGE =~ /get test/

gitlab-sast:
  stage: test
  trigger:
    include:
      - template: Security/SAST.gitlab-ci.yml
  needs:
    - build
  only:
    variables:
      - $CI_COMMIT_MESSAGE =~ /get test/

release:
  stage: release
  variables:
    GIT_STRATEGY: none
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [ "" ]
  cache: [ ]
  before_script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - crane tag $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA $VERSION
  when: manual

deploy-fronted:
  stage: deploy
  image: debian:latest
  script:
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install -y openssh-client gettext-base)'
    - eval $(ssh-agent -s)
    - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - echo "${SSH_KNOWN_HOSTS}" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - echo CI_PROJECT_DIR=${CI_PROJECT_DIR}
    - ssh ${DEPLOY_USER}@${DEPLOY_HOST} "sudo mkdir -p /tmp/${CI_PROJECT_DIR}/frontend/"
    - scp -v ./frontend/default.conf ${DEPLOY_USER}@${DEPLOY_HOST}:/tmp${CI_PROJECT_DIR}/frontend
    - envsubst < ./frontend/deploy.sh | ssh ${DEPLOY_USER}@${DEPLOY_HOST} 'bash -s'
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: http://${DEV_HOST}:80
  needs:
     - release

telegram-notification-frontend:
  stage: notify
  only:
    changes:
      - frontend/**/*
    variables:
      - $CI_COMMIT_MESSAGE =~ /send notification/

  script:
    - >
      curl -X POST -H "Content-type: application/json"
      --data "{\"chat_id\": \"-1002138916913\", \"text\": \"Андрей Федотов собрал frontend и тесты успешно завершены. $CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_SHA/download?job=build-job\"}"
      https://api.telegram.org/bot5933756043:AAE8JLL5KIzgrNBeTP5e-1bkbJy4YRoeGjs/sendMessage
  needs:
      - sonarqube-frontend-sast
      - gitlab-sast