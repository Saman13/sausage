cache:
  paths:
    - ${CI_PROJECT_DIR}/.m2/repository

variables:
   VERSION: 1.0.${CI_PIPELINE_ID}
   MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
   JAVA_OPTS: -XX:MaxRAMPercentage=90 # для того, чтобы Maven не съел всю свободную оперативку

stages:
   - build
   - test
   - notify
   - release
   - deploy

build:
   stage: build
   variables:
    SPRING_FLYWAY_ENABLED: "false"
   script:
      - cd backend
      - >
         mvn package
         -Dversion.application=${VERSION}
         -Dmaven.repo.local=${MAVEN_REPO_PATH}
   rules: # rules и only в данных случаях взаимозаменяемы
      - changes:
           - backend/**/*

sonarqube-backend-sast:
  stage: test
  image: maven:3.8-openjdk-16
  script:
    - cd backend
    - >
      mvn verify sonar:sonar -Dsonar.qualitygate.wait=true
      -Dsonar.projectKey=${SONAR_PROJECT_KEY_BACK}
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONAR_LOGIN}
  needs:
    - build

gitlab-sast:
  stage: test
  trigger:
    include:
      - template: Security/SAST.gitlab-ci.yml
  needs:
    - build


release:
   stage: release
   script:
      - cd backend
      - >
         mvn deploy -DskipTests -s settings.xml
         -Dversion.application=${VERSION}
         -Dmaven.repo.local=${MAVEN_REPO_PATH}
   needs:
     - sonarqube-backend-sast
     - gitlab-sast

deploy:
  stage: deploy
  before_script:
    #устанавливаем ssh-agent для удобства аутентификации по ssh
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    #сохраняем сгенеренный ранее приватный ключ для раннера
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
     #выполняем простую команду для проверки
     - ssh ${DEV_USER}@${DEV_HOST} "id"
     #копирование unit-файла
     - scp ./backend/backend.service ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/backend.service
     #запуск скрипта
     - ssh ${DEV_USER}@${DEV_HOST} "export "CURRENT_VERSION=${VERSION}"; export "VERSION=${VERSION}"; export "DEV_HOST=${DEV_HOST}"; export "NEXUS_REPO_URL=${NEXUS_REPO_URL}"; export "NEXUS_REPO_USER=${NEXUS_REPO_USER}"; export "NEXUS_REPO_PASS=${NEXUS_REPO_PASS}"; export "NEXUS_REPO_BACKEND_NAME=${NEXUS_REPO_BACKEND_NAME}"; setsid /bin/bash -s " < ./backend/deploy.sh
  environment:
    name: backend
    url: http://std-030-13.praktikum-services.tech/
  rules:
    - when: manual # Специальное условие, требующее ручного нажатия для установки на виртуальную машину нового обновления

  needs:
    - sonarqube-backend-sast
    - gitlab-sast


telegram-notification-backend:
  stage: notify
  only:
    variables:
      - $CI_COMMIT_MESSAGE =~ /send notification/
  script:
    - >
      curl -X POST -H "Content-type: application/json"
      --data "{\"chat_id\": \"-1002138916913\", \"text\": \"Андрей Федотов собрал backend и тесты прошли успешно. $CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_SHA/download?job=build-backend-code-job\"}"
      https://api.telegram.org/bot5933756043:AAE8JLL5KIzgrNBeTP5e-1bkbJy4YRoeGjs/sendMessage
  needs:
      - sonarqube-backend-sast
      - gitlab-sast