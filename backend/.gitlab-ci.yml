cache:
  paths:
    - ${CI_PROJECT_DIR}/.m2/repository

variables:
   VERSION: 1.0.${CI_PIPELINE_ID}
   MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
   JAVA_OPTS: -XX:MaxRAMPercentage=90 # для того, чтобы Maven не съел всю свободную оперативку

stages:
   - build
   - test
   - notify
   - release
   - deploy

build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug #kaniko служит для билда образа
    entrypoint: [""]
  # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
  script:
    - echo "test"
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/backend"
      --dockerfile "${CI_PROJECT_DIR}/backend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/sausage-backend:$CI_COMMIT_SHA"
      --build-arg VERSION=$VERSION
      --cache=true
  rules: # rules и only в данных случаях взаимозаменяемы
    - changes:
      - backend/**/*

sonarqube-backend-sast:
  stage: test
  variables:
    SPRING_FLYWAY_ENABLED: "false"
    SPRING_CLOUD_VAULT_ENABLED: "false"
  image: maven:3.8-openjdk-16
  script:
    - cd backend
    - >
      mvn verify sonar:sonar -Dsonar.qualitygate.wait=true
      -Dsonar.projectKey=${SONAR_PROJECT_KEY_BACK}
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONAR_LOGIN}
  needs:
    - build
  only:
    variables:
      - $CI_COMMIT_MESSAGE =~ /get test/
  cache:
    key: ${CI_JOB_NAME}
    paths: [ ]

gitlab-sast:
  stage: test
  trigger:
    include:
      - template: Security/SAST.gitlab-ci.yml
  needs:
    - build
  only:
    variables:
      - $CI_COMMIT_MESSAGE =~ /get test/

release:
  stage: release
  variables:
    GIT_STRATEGY: none
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [ "" ]
  cache: [ ]

  before_script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - crane tag $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA $VERSION

deploy-backend:
  stage: deploy
  image: vault:1.11.3
  before_script:
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=sausage-store jwt=$CI_JOB_JWT)"
    - ssh ${DEV_USER}@${DEV_HOST}
      "export "VERSION=${VERSION}";
       export "SPRING_DATASOURCE_URL=${PSQL_DATASOURCE}";
       export "SPRING_DATASOURCE_USERNAME=${PSQL_USER}";
       export "SPRING_DATASOURCE_PASSWORD=$(vault kv get -field=spring.datasource.password secret/sausage-store)";
       export "SPRING_DATA_MONGODB_URI=${MONGO_DATA}";
      /bin/bash -s " < ./backend/backend_deploy.sh
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: http://${DEV_HOST}:8080
  needs:
     - release

telegram-notification-backend:
  stage: notify
  only:
    variables:
      - $CI_COMMIT_MESSAGE =~ /send notification/
  script:
    - >
      curl -X POST -H "Content-type: application/json"
      --data "{\"chat_id\": \"-1002138916913\", \"text\": \"Андрей Федотов собрал backend и тесты прошли успешно. $CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_SHA/download?job=build-backend-code-job\"}"
      https://api.telegram.org/bot5933756043:AAE8JLL5KIzgrNBeTP5e-1bkbJy4YRoeGjs/sendMessage
      
      
      
